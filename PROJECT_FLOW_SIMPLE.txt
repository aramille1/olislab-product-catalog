OLI'S LAB PRODUCT CATALOG - PROJECT FLOW DOCUMENTATION
================================================================

PROJECT OVERVIEW
===============
This is a Next.js 15 e-commerce application for Oli's Lab skincare products.
Built with TypeScript, Tailwind CSS, and modern React patterns.

Key Features:
- Responsive design (mobile, tablet, desktop)
- Advanced product filtering
- Global shopping cart
- Real-time product selection
- Performance optimized

ARCHITECTURE
============
1. Next.js 15 App Router
2. Global Context Providers (Products, Bag)
3. Custom Hooks for business logic
4. Reusable Components
5. API Routes for data handling

DETAILED FLOW BREAKDOWN
======================

PHASE 1: APPLICATION STARTUP
---------------------------
1. Next.js starts the application
2. layout.tsx renders first
3. Global providers initialize:
   - ProductsProvider (empty products array, no selected product)
   - BagProvider (empty shopping bag)
4. Header component renders with navigation
5. Custom fonts load (Sans, Mono)
6. Global CSS variables apply

PHASE 2: DATA LOADING
---------------------
1. page.tsx renders and shows skeleton loading
2. ProductsContext automatically fetches data from /api/products
3. API route:
   - Reads products.csv file
   - Parses CSV using papaparse
   - Transforms image URLs to CDN format
   - Returns paginated product data
4. Data is stored in global context
5. First product is auto-selected
6. Loading state changes from true to false

PHASE 3: UI RENDERING
---------------------
1. Skeleton loading disappears
2. Three main components render:
   a) ProductDetails (selected product)
   b) RecommendedProducts (carousel)
   c) AllProducts (filtered grid)

COMPONENT DETAILS
=================

1. PRODUCTDETAILS COMPONENT
---------------------------
Purpose: Shows the currently selected product

Layout (Desktop):
- Left: Product rating, expandable sections
- Center: Product images (Swiper carousel)
- Right: Product info, price, add to bag button

Features:
- Swiper image carousel with pagination dots
- Expandable sections (ingredients, how to use, etc.)
- Add to bag button with quantity controls
- Responsive layout (stacks on mobile)

2. RECOMMENDEDPRODUCTS COMPONENT
--------------------------------
Purpose: Shows horizontal carousel of recommended products

Features:
- 12 product limit (excludes current selection)
- Responsive Swiper with dynamic breakpoints
- Hover effects (image changes to cream.png)
- Navigation: arrows on mobile, pagination on desktop

Breakpoints:
- Mobile: 1-2 slides
- Tablet: 2-3 slides
- Desktop: 4-6 slides

3. ALLPRODUCTS COMPONENT
------------------------
Purpose: Shows filtered products in responsive grid

Layout:
- Desktop: Filter sidebar + Product grid
- Mobile: Floating filter button + Product grid

Features:
- Responsive grid (1-6 columns based on screen size)
- Load more functionality (9 products at a time)
- Product count display
- Single product positioning (top-left when only 1 result)

4. FILTERALLPRODUCTS COMPONENT
------------------------------
Purpose: Handles all filtering logic and UI

Filter Categories:
1. Category (cleanser, moisturizer, serum)
2. Brand (Oli's Lab, etc.)
3. Skin Type (dry, oily, combination, sensitive)
4. Concerns (acne, aging, hyperpigmentation)
5. Bundle (show/hide bundles)
6. Don't Show Me (exclude specific items)

Mobile Experience:
- Floating filter button
- Full-screen modal with backdrop
- Sticky header/footer
- Body scroll prevention

DATA FLOW
=========

Global State Management:
1. ProductsContext:
   - products: all available products
   - selectedProduct: currently selected product
   - loading: initial loading state
   - error: error state

2. BagContext:
   - bagItems: product ID to quantity mapping
   - addToBag: add item function
   - updateQuantity: update quantity function
   - removeFromBag: remove item function

Data Flow:
CSV File → API Route → Context → Components → UI

Custom Hooks:
1. useAddToBag: Handles add to bag logic
2. useMobileDetection: Detects screen size
3. useFilterOptions: Extracts filter options
4. useLoadMore: Manages pagination
5. useProductActions: Handles product selection

USER INTERACTIONS
================

1. PRODUCT SELECTION
-------------------
User clicks product → Product becomes selected → Scroll to top → Show product details

Steps:
1. User clicks product card
2. selectProduct function called
3. ProductsContext updates selectedProduct state
4. productDetailsLoading set to true (shows skeleton)
5. 800ms delay for better UX
6. ProductDetails re-renders with new product
7. Smooth scroll to top
8. Loading state ends

2. ADD TO BAG
-------------
User clicks "ADD TO BAG" → Loading state → Quantity controls appear → Header updates

Steps:
1. User clicks "ADD TO BAG" button
2. handleAddToBag function called
3. Button shows loading spinner
4. 1000ms API delay simulation
5. Product added to global bag state
6. Button changes to quantity controls (+/-)
7. Header bag icon updates with total count
8. All product cards with same product update quantities

3. FILTERING
------------
User selects filters → Products filter in real-time → Grid updates → Count updates

Steps:
1. User clicks filter options
2. Filter state updated (activeFilters, excludedFilters)
3. useEffect triggers getFilteredProducts function
4. Products filtered based on criteria
5. Filtered results passed to AllProducts
6. Product grid re-renders
7. Product count updates
8. Load More button resets

4. MOBILE FILTER
----------------
User taps filter button → Full-screen modal opens → User selects filters → Apply → Modal closes

Steps:
1. User taps floating "FILTER" button
2. isFilterVisible state changes to true
3. Full-screen modal appears
4. Body scroll prevented
5. User makes filter selections
6. User taps "SEE RESULTS"
7. Modal closes, body scroll restored
8. Filtered products displayed

PERFORMANCE OPTIMIZATIONS
========================

1. React.memo Usage:
   - ProductCard, ProductDetails, RecommendedProducts, AllProducts
   - Custom comparison functions to prevent unnecessary re-renders

2. useMemo for Expensive Computations:
   - Filter options extraction
   - Product transformations
   - Grid calculations

3. useCallback for Event Handlers:
   - Product click handlers
   - Add to bag handlers
   - Filter handlers

4. Lazy Loading:
   - Load more products on demand
   - Skeleton loading states
   - Progressive enhancement

RESPONSIVE DESIGN
=================

Breakpoints:
- Mobile: < 640px
- Small tablets: 640px - 768px
- Tablets: 768px - 1024px
- Laptops: 1024px - 1280px
- Desktop: 1280px - 1536px
- Large screens: > 1536px

Mobile Adaptations:
- Filter becomes floating button + modal
- Product grid: 1-2 columns
- Recommended products: 1-2 slides with arrows
- Header: compact layout

Desktop Adaptations:
- Filter: always-visible sidebar
- Product grid: 4-6 columns
- Recommended products: 4-6 slides with pagination
- Header: full layout

ERROR HANDLING
==============

1. API Error Handling:
   - Try-catch blocks around fetch calls
   - Graceful fallback to empty arrays
   - User-friendly error messages

2. User-Friendly Error Display:
   - Error component with retry button
   - Clear error messages
   - Fallback UI states

3. Loading States:
   - Skeleton components during loading
   - Loading spinners for actions
   - Progressive loading indicators

STYLING & DESIGN
================

Color Palette:
- Primary: #000000 (Black)
- Secondary: #CCB9A7 (Beige)
- Background: #f0edde (Light cream)
- Text: #000000 (Black)
- Text Secondary: #666666 (Gray)

Typography:
- Sans: 'Sans', sans-serif
- Mono: 'Mono', monospace
- Responsive font sizes (xs to 2xl)

Spacing:
- Consistent spacing using Tailwind
- Responsive padding and margins
- Grid-based layout system

DEVELOPMENT & BUILD
===================

Development:
- npm run dev (port 8080)
- Hot reload enabled
- TypeScript checking
- ESLint warnings

Production Build:
- npm run build
- Tree shaking enabled
- Code splitting
- Static optimization

Build Output:
- Main bundle: 36.5 kB
- Shared chunks: 135 kB
- Total first load: 163 kB
- API routes: 0 B (serverless)

FUTURE ENHANCEMENTS
===================

Potential Improvements:
1. Search functionality
2. Wishlist feature
3. Product reviews
4. Advanced filtering (price, rating)
5. Product comparison
6. Personalization
7. Analytics tracking
8. PWA features

Technical Debt:
1. Image optimization (Next.js Image)
2. SEO optimization
3. Accessibility improvements
4. Testing implementation
5. Error boundaries
6. Performance monitoring

CONCLUSION
==========
The Oli's Lab Product Catalog is a modern, performant e-commerce application that demonstrates:
- Best practices with React and Next.js
- Optimized performance and data flow
- Excellent user experience
- Responsive design across devices
- Clean, maintainable code structure
- Scalable architecture for future enhancements

The application successfully delivers a professional e-commerce experience with advanced filtering, real-time updates, and sophisticated shopping cart functionality while maintaining high performance standards.
